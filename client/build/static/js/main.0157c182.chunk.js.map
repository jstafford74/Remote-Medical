{"version":3,"sources":["components/StickyNav/index.jsx","pages/Splash/index.jsx","options.js","utils/API.js","components/BasicForm/index.jsx","pages/Demo/index.jsx","components/SimpleForm/DropZone.js","components/SimpleForm/index.jsx","components/CircleLogo/index.jsx","pages/TeleMed/index.jsx","components/Form/index.js","pages/ImageUploadDemo/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Style","navLink","color","fontSize","navButton","marginTop","StickyNav","props","react_default","a","createElement","Container","fluid","Navbar","variant","bg","collapseOnSelect","expand","sticky","Col","lg","className","Brand","style","href","Toggle","aria-controls","header","letterSpacing","textAlign","button","width","Splash","Jumbotron","id","react_router_dom","to","Button","options","allowedConnections","passwordlessMethod","auth","redirectUrl","params","scope","theme","labeledSubmitButton","logo","API","signup","newUser","axios","post","then","res","data","acctCheck","first","last","email","dob","get","concat","upload","config","catch","error","console","log","BasicForm","required","value","undefined","lock","Auth0LockPasswordless","onSubmit","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","values","response","wrap","_context","prev","next","FirstName","toLowerCase","LastName","DOB","sent","patient_Email","show","alert","stop","_x","apply","this","arguments","Row","md","Card","border","borderRadius","Header","as","paddingTop","react_final_form_es","initialValues","render","handleSubmit","form","submitting","pristine","Body","ListGroup","Item","name","validate","input","meta","InputGroup","touched","Prepend","Text","backgroundColor","Form","Control","assign","size","placeholder","parse","formatString","Footer","type","disabled","JSON","stringify","jumbo","height","Demo","components_BasicForm","Dropzone","_useDropzone","useDropzone","noClick","getRootProps","getInputProps","files","acceptedFiles","map","file","key","path","multiple","RFFormat","open","Append","rows","component","onClick","reset","obj","CircleLogo","cx","cy","r","stroke","fill","strokeWidth","TeleMed","handleFormSubmit","react","class","components_CircleLogo","SimpleForm","_useState","useState","_useState2","slicedToArray","setFile","e","preventDefault","FormData","append","headers","content-type","onChange","fileItem","target","htmlFor","components_Form","App","Component","Fragment","components_StickyNav","react_router","exact","ImageDemo","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0157c182.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Navbar, Col } from 'react-bootstrap'\n\nconst Style = {\n  navLink: {\n    color: 'black',\n    fontSize: '1.5rem',\n  },\n  navButton: {\n    marginTop: '10px'\n  }\n}\n\nconst StickyNav = props => {\n  return (\n    <Container fluid='md sm'>\n      <Navbar\n        variant='light'\n        bg='light'\n        collapseOnSelect\n        expand='lg sm md'\n        sticky='top'\n      >\n        <Col lg={4} className='d-md text-center'>\n          <Navbar.Brand style={Style.navLink} href='/'>\n            Secure Web Medical Portal\n          </Navbar.Brand>\n        </Col>\n        \n        <Navbar.Toggle aria-controls='respnav' />\n      </Navbar>\n    </Container>\n  )\n}\n\nexport default StickyNav\n","import React from 'react';\nimport { Button, Container, Jumbotron } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport './style.css';\n\nconst Style = {\n  header: {\n    letterSpacing: '.75rem',\n    textAlign: 'center',\n    fontSize: '3rem'\n  },\n\n  button: {\n    width: 175\n  }\n}\n\nexport default function Splash (props) {\n  // // useEffect(() => {\n  //   lock.show()\n  //   lock.on('authenticated', function (authResult) {\n  //     setLoggedIn(true)\n  //     setToken(authResult.accessToken)\n  //     alert(token)\n  //   })\n  // }, [token])\n\n  return (\n    <Container fluid='md sm' className='text-center'>\n      <Jumbotron id='main'>\n        <h1 style={Style.header}>Remote Medical </h1>\n        {/* <h3>\n          <i class='fas fa-laptop-medical fa-7x'></i>\n        </h3>\n        <h3>\n          <i class='fas fa-user-md fa-7x'></i>\n        </h3> */}\n        <h3 style={{ color: 'red' }}>\n          <i className='fas fa-star-of-life fa-2x'></i>\n        </h3>\n\n        <hr />\n        <h4 className='font-weight-bold'>\n          Welcome to Remote Medical Treatment\n        </h4>\n        <hr />\n        <h5 className='text-left'>\n          This web portal is created in direct reponse to the 2020 outbreak of\n          covid-19. As social distancing has become the new norm and the number of\n          confirmed covid-19 cases in the United States accelerate, I decided to\n          augment an existing offsite medical treatment project with both\n          authorized and authenticated login procedures that incorporate a\n          passwordless feature. This feature ensures a quick and secure method\n          to deliver remote medical treatment to anyone that exists in an\n          'authorized for medical treatment' database.{' '}\n        </h5>\n        <hr />\n        <h4 className='font-weight-bold'>How Does it Work?</h4>\n        <h5 className='text-left'>\n          This is a simple & secure bilateral communication app between a patient\n          and doctor. The office that provides medical treatment will supply a\n          minimal 'authorized for medical treatment' database that includes\n          first, last, email and DOB for each potential remote patient. The\n          patient upon visiting the site will be asked to provide this basic\n          information. If the patient exists in the database, they will be sent\n          an encrpted password link that directs them to a brief questionaire.\n          Along with the aforementioned basic information, notes about the\n          nature of their complaint and images can be provided and securely\n          sent to the doctor's office.\n        </h5>\n        <hr />\n        <h4 className='font-weight-bold'>Security</h4>\n        <h5 className='text-left'>\n          Built upon Auth0 libraries, this site provides HIPAA compliant login\n          procedures. PHI, or Personal Health Information, is the focus of HIPAA\n          regulations. Specific to this web portal, conversations about your\n          health and between you and your doctor are protected and meant to be\n          private at all times. In order to comply with HIPAA law, an office or\n          associate is required to:\n        </h5>\n        <ol className='text-left'>\n          <li>Have safeguards so that PHI data is always protected</li>\n          <li>\n            Restrict access to PHI data to only those people needed to\n            accomplish the intended purpose.\n          </li>\n          <li>\n            Have agreements(BAA's) in place with service providers to ensure\n            security.\n          </li>\n          <li>\n            Have procedures and policies to limit access to PHI data and\n            training in place to teach employees about security and privacy.\n          </li>\n        </ol>\n        <h5 className='text-left'>\n          Specific to this B2C solution, once a BAA is in place, only two\n          elements need to be addressed:{' '}\n          <span className='font-weight-bold'>Automatic Logoff</span> &{' '}\n          <span className='font-weight-bold'>Authenticated Login</span>. Because\n          Auth0 uses JWT encryption(JSON Web Token) an expiration/timeout is\n          required within the JWT infrastructure. This is a customizable feature\n          but is recommended to last no longer than 30 minutes.{' '}\n        </h5>\n        <hr />\n        <Link to='/rmt'>\n          <Button className='btn btn-lg btn-info'>Demo RMT</Button>\n        </Link>\n      </Jumbotron>\n      {/* {loggedIn ? <RFFormat /> : null} */}\n    </Container>\n  )\n}\n","const options = {\n  allowedConnections: ['email'],\n  passwordlessMethod: 'link',\n  auth: {\n      redirectUrl: 'http://localhost:3000/telemed',\n      params: {\n          scope: 'openid profile email'\n      }\n  },\n  theme: {\n      labeledSubmitButton: true,\n      logo: 'https://i.imgur.com/Kug5bGI.png'\n  }\n}\nexport default options;\n","\nimport axios from \"axios\";\n\nexport default {\n\n    signup: function (newUser) {\n        return axios.post(\"/sndapi/auth/signup\", newUser).then(res => res.data[0]);\n    },\n    \n    acctCheck: (first, last, email, dob) => {\n        return axios.get(`/rmt/auth/checkacct/${first}/${last}/${email}/${dob}`).then(res =>\n            res.data)\n    },\n\n    upload: function (data, config) {\n        return axios.post(\"/rmt/images\", data, config).then((res) => res.data\n        ).catch((error) => { console.log(error) });\n    }\n\n};","import React from 'react'\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  ListGroup,\n  InputGroup,\n  Button\n} from 'react-bootstrap'\nimport { Form as FormB } from 'react-bootstrap'\nimport { Form, Field } from 'react-final-form'\nimport formatString from 'format-string-by-pattern'\nimport options from '../../options'\nimport { Auth0LockPasswordless } from 'auth0-lock'\nimport API from '../../utils/API'\n  \nfunction BasicForm (props) {\n  const required = value => (value ? undefined : 'Required')\n\n  const lock = new Auth0LockPasswordless(\n    'Dq0j1ihisEKjWAQHv9gmgkhV8qxKFA7I',\n    'dev-jyxuwhal.auth0.com',\n    options\n  )\n\n  const onSubmit = async values => {\n    const response = await API.acctCheck(\n      values.FirstName.toLowerCase(),\n      values.LastName.toLowerCase(),\n      values.email,\n      values.DOB\n    )\n    if (response[0].patient_Email) {\n      console.log(response[0].patient_Email)\n      lock.show()\n    } else {\n      alert('User Not Found. Would You Like To Sign Up?')\n    }\n  }\n  return (\n    <Container fluid>\n      <Row>\n        <Col md={8}>\n          <Card\n            className='py2 my2'\n            style={{\n              border: 'black solid 1px',\n              borderRadius: 10,\n              marginTop: 5\n            }}\n          >\n            <Card.Header as='h3' style={{ paddingTop: 5 }}>\n              Remote Treatment Form\n            </Card.Header>\n            <Form\n              onSubmit={onSubmit}\n              initialValues={{}}\n              render={({\n                handleSubmit,\n                form,\n                submitting,\n                pristine,\n                values\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <fieldset>\n                    <Card.Body>\n                      <h2 className='text-muted'>Verify Information</h2>\n\n                      <ListGroup variant='flush'>\n                        <ListGroup.Item id='FirstName' className='px-1'>\n                          <Field name='FirstName' validate={required}>\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text id='basic-addon1'>\n                                      First Name\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                )}\n\n                                <FormB.Control\n                                  {...input}\n                                  size='lg'\n                                  placeholder='First Name'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </ListGroup.Item>\n                        <ListGroup.Item id='LastName' className='px-1'>\n                          <Field name='LastName' validate={required}>\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text id='basic-addon1'>\n                                      Last Name\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                )}\n                                <FormB.Control\n                                  {...input}\n                                  size='lg'\n                                  placeholder='Last Name'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </ListGroup.Item>\n                        <ListGroup.Item id='email' className='px-1'>\n                          <Field name='email' validate={required}>\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : null}\n                                <FormB.Control\n                                  {...input}\n                                  size='lg'\n                                  placeholder='Email'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </ListGroup.Item>\n                        <ListGroup.Item id='DOB' className='px-1'>\n                          <Field\n                            name='DOB'\n                            validate={required}\n                            parse={formatString('YYYY-MM-DD')}\n                          >\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text id='basic-addon1'>\n                                      D.O.B.\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                )}\n                                <FormB.Control\n                                  {...input}\n                                  placeholder='YYYY-MM-DD'\n                                  size='lg'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </ListGroup.Item>\n                      </ListGroup>\n                    </Card.Body>\n                    <Card.Footer>\n                      <Button\n                        type='submit'\n                        style={{ width: 175 }}\n                        size='lg'\n                        variant='primary'\n                        disabled={submitting || pristine}\n                      >\n                        Submit\n                      </Button>\n                    </Card.Footer>\n                    <pre>{JSON.stringify(values)}</pre>\n                  </fieldset>\n                </form>\n              )}\n            />\n          </Card>\n        </Col>\n      </Row>\n      <hr />\n    </Container>\n  )\n}\nexport default BasicForm\n","import React from 'react'\nimport { Container, Jumbotron } from 'react-bootstrap'\n\nimport BasicForm from '../../components/BasicForm'\n\nconst Style = {\n  header: {\n    letterSpacing: '.75rem',\n    textAlign: 'center',\n    fontSize: '4rem'\n  },\n  jumbo: {\n    height: '500vh'\n  },\n  button: {\n    width: 175\n  }\n}\n\nexport default function Demo (props) {\n  // const [isVerified, ]\n  return (\n    <Container fluid='md' className='text-center'>\n      <Jumbotron id='main'>\n        <h1 style={Style.header}>Remote Medical </h1>\n        {/* <h3>\n          <i class='fas fa-laptop-medical fa-7x'></i>\n        </h3>\n        <h3>\n          <i class='fas fa-user-md fa-7x'></i>\n        </h3> */}\n        <h3 style={{ color: 'red' }}>\n          <i className='fas fa-star-of-life fa-2x'></i>\n        </h3>\n        <hr />\n        <BasicForm />\n      </Jumbotron>\n      {/* {loggedIn ? <RFFormat /> : null} */}\n    </Container>\n  )\n}\n","import React from 'react';\nimport { useDropzone } from \"react-dropzone\";\n\nconst Dropzone = ({ props }) => {\n    const { getRootProps, getInputProps, acceptedFiles } = useDropzone({ noClick: true });\n    const files = acceptedFiles.map(file => <li key={file.path}>{file.path}</li>);\n\n\n    return (\n        <div {...getRootProps({ className: 'dropzone' })}>\n            <input {...getInputProps()}\n                as='file'\n                multiple=''\n            />\n            <ul>{files}</ul>\n        </div>\n    );\n};\n\nexport default Dropzone","import React from 'react'\nimport {\n  Container,\n  Col,\n  Row,\n  Card,\n  ListGroup,\n  InputGroup,\n  Button\n} from 'react-bootstrap'\nimport { Form as FormB } from 'react-bootstrap'\nimport { Form, Field } from 'react-final-form'\nimport formatString from 'format-string-by-pattern'\nimport Dropzone from './DropZone'\n\nimport { useDropzone } from 'react-dropzone'\n\nconst required = value => (value ? undefined : 'Required')\n\nconst RFFormat = props => {\n  const { open } = useDropzone()\n  return (\n    <Container fluid='md'>\n      <Card\n        className='py2 my4'\n        style={{ border: 'black solid 1px', borderRadius: 10, marginTop: 5 }}\n      >\n        <Card.Header as='h1' style={{ paddingTop: 5 }}>\n          Remote Treatment Form\n        </Card.Header>\n        <Form\n          initialValues={{}}\n          render={({ handleSubmit, form, submitting, pristine, values }) => (\n            <form onSubmit={handleSubmit}>\n              <fieldset>\n                <Card.Body>\n                  <h2 className='text-muted'>Please Enter Basic Information</h2>\n                  <Card.Text>\n                    <ListGroup variant='flush'>\n                      <ListGroup.Item className='px-1'>\n                        <Field name='FirstName' validate={required}>\n                          {({ input, meta }) => (\n                            <InputGroup className='my-2 border rounded border-info'>\n                              {meta.touched && meta.error ? (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text\n                                    style={{\n                                      backgroundColor: 'gray',\n                                      color: 'red'\n                                    }}\n                                    id='basic-addon1'\n                                  >\n                                    {meta.error}\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              ) : (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text id='basic-addon1'>\n                                    First Name\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              )}\n\n                              <FormB.Control\n                                {...input}\n                                size='lg'\n                                placeholder='First Name'\n                              />\n                            </InputGroup>\n                          )}\n                        </Field>\n                      </ListGroup.Item>\n                      <ListGroup.Item className='px-1'>\n                        <Field name='LastName' validate={required}>\n                          {({ input, meta }) => (\n                            <InputGroup className='my-2 border rounded border-info'>\n                              {meta.touched && meta.error ? (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text\n                                    style={{\n                                      backgroundColor: 'gray',\n                                      color: 'red'\n                                    }}\n                                    id='basic-addon1'\n                                  >\n                                    {meta.error}\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              ) : (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text id='basic-addon1'>\n                                    Last Name\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              )}\n                              <FormB.Control\n                                {...input}\n                                size='lg'\n                                placeholder='Last Name'\n                              />\n                            </InputGroup>\n                          )}\n                        </Field>\n                      </ListGroup.Item>\n                      <ListGroup.Item className='px-1'>\n                        <Field name='email_s' validate={required}>\n                          {({ input, meta }) => (\n                            <InputGroup className='my-2 border rounded border-info'>\n                              {meta.touched && meta.error ? (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text\n                                    style={{\n                                      backgroundColor: 'gray',\n                                      color: 'red'\n                                    }}\n                                    id='basic-addon1'\n                                  >\n                                    {meta.error}\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              ) : null}\n                              <FormB.Control\n                                {...input}\n                                size='lg'\n                                placeholder='Email'\n                              />\n                              <InputGroup.Append>\n                                <InputGroup.Text id='basic-addon2'>\n                                  @gmail.com\n                                </InputGroup.Text>\n                              </InputGroup.Append>\n                            </InputGroup>\n                          )}\n                        </Field>\n                      </ListGroup.Item>\n\n                      <Row className='px-1 '>\n                        <Col md={6}>\n                          <Field\n                            name='phone'\n                            validate={required}\n                            parse={formatString('(999)-999-9999')}\n                          >\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text id='basic-addon1'>\n                                      Phone\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                )}\n                                <FormB.Control\n                                  {...input}\n                                  size='lg'\n                                  placeholder='(203)-123-1234'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </Col>\n                        <Col md={6}>\n                          <Field\n                            name='dob'\n                            validate={required}\n                            parse={formatString('YYYY-MM-DD')}\n                          >\n                            {({ input, meta }) => (\n                              <InputGroup className='my-2 border rounded border-info'>\n                                {meta.touched && meta.error ? (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text\n                                      style={{\n                                        backgroundColor: 'gray',\n                                        color: 'red'\n                                      }}\n                                      id='basic-addon1'\n                                    >\n                                      {meta.error}\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                ) : (\n                                  <InputGroup.Prepend>\n                                    <InputGroup.Text id='basic-addon1'>\n                                      D.O.B.\n                                    </InputGroup.Text>\n                                  </InputGroup.Prepend>\n                                )}\n                                <FormB.Control\n                                  {...input}\n                                  placeholder='YYYY-MM-DD'\n                                  size='lg'\n                                />\n                              </InputGroup>\n                            )}\n                          </Field>\n                        </Col>\n                      </Row>\n\n                      <ListGroup.Item className='px-1  '>\n                        <Field name='message' validate={required}>\n                          {({ input, meta }) => (\n                            <InputGroup className='my-2 border rounded border-info'>\n                              {meta.touched && meta.error ? (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text\n                                    style={{\n                                      backgroundColor: 'gray',\n                                      color: 'red'\n                                    }}\n                                    id='basic-addon1'\n                                  >\n                                    {meta.error}\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              ) : (\n                                <InputGroup.Prepend>\n                                  <InputGroup.Text id='basic-addon1'>\n                                    Message to Clinical Staff\n                                  </InputGroup.Text>\n                                </InputGroup.Prepend>\n                              )}\n                              <FormB.Control\n                                {...input}\n                                as='textarea'\n                                rows='3'\n                                placeholder=''\n                              />\n                            </InputGroup>\n                          )}\n                        </Field>\n                      </ListGroup.Item>\n                    </ListGroup>\n\n                    <Field name='tderm_image' component={Dropzone}>\n                      <InputGroup className='border border-info rounded'>\n                        <InputGroup.Prepend>\n                          <Button variant='outline-secondary' onClick={open}>\n                            Upload Images\n                          </Button>\n                        </InputGroup.Prepend>\n                        <FormB.Control component={Dropzone} />\n                      </InputGroup>\n                    </Field>\n                  </Card.Text>\n                </Card.Body>\n                <Card.Footer className='d-flex bd-highlight justify-content-around '>\n                  <Button\n                    type='submit'\n                    style={{ width: 175 }}\n                    size='lg'\n                    variant='primary'\n                    disabled={submitting || pristine}\n                  >\n                    Submit\n                  </Button>{' '}\n                  <Button\n                    type='button'\n                    variant='danger'\n                    size='lg'\n                    style={{ width: 175 }}\n                    onClick={form.reset}\n                    disabled={submitting || pristine}\n                  >\n                    Reset\n                  </Button>\n                </Card.Footer>\n              </fieldset>\n            </form>\n          )}\n        />\n      </Card>\n      <hr />\n    </Container>\n  )\n}\nexport default RFFormat\n","import React from \"react\";\n\nconst Style = {\n    obj: {\n        textAlign: \"center\"\n    }\n}\nconst CircleLogo = () => {\n    return (\n        <figure style={Style.obj}>\n            <svg width=\"500\" height=\"200\">\n                <circle cx=\"70\" cy=\"100\" r=\"20\" stroke=\"gray\" fill=\"#D15FEE\" strokeWidth=\"1\"></circle>\n                <circle cx=\"155\" cy=\"100\" r=\"35\" stroke=\"gray\" fill=\"#9932CD\" strokeWidth=\"1\"></circle>\n                <circle cx=\"275\" cy=\"100\" r=\"50\" stroke=\"gray\" fill=\"#7D26CD\" strokeWidth=\"1\"></circle>\n                <circle cx=\"425\" cy=\"100\" r=\"65\" stroke=\"gray\" fill=\"#2E0854\" strokeWidth=\"1\"></circle>\n            </svg>\n        </figure>\n    )\n}\nexport default CircleLogo","import React, { Fragment } from 'react'\nimport { Container, Jumbotron } from 'react-bootstrap'\nimport RFFormat from '../../components/SimpleForm'\nimport CircleLogo from '../../components/CircleLogo'\n\nconst Style = {\n  header: {\n    letterSpacing: '.75rem',\n    textAlign: 'center',\n    fontSize: '4rem'\n  },\n  jumbo: {\n    height: '500vh'\n  }\n}\n\nconst TeleMed = ({ handleFormSubmit, values, props }) => {\n  return (\n    <Fragment>\n      <Container fluid='md' className='text-center'>\n        <Jumbotron id='main' style={Style.jumbo}>\n          <h1 style={Style.header}>Remote Medical Treatment</h1>\n          <h3>\n            <i class='fas fa-laptop-medical fa-7x'></i>\n          </h3>\n          <h3>\n            <i class='fas fa-user-md fa-7x'></i>\n          </h3>\n          <h3>\n            <i class='fas fa-star-of-life fa-7x'></i>\n          </h3>\n          {/* <Row>\n            <Col lg={4}>\n              <Link href='/snd-covid-19'>\n                <Button style={Style.button}>Covid-19 Response</Button>\n              </Link>\n            </Col>\n\n            <Col lg={4}>\n              <Link href='/snd-patient-safety'>\n                <Button style={Style.button}>Patient Safety</Button>\n              </Link>\n            </Col>\n            <Col lg={4}>\n              <Link href='/snd-contact'>\n                <Button style={Style.button}>Contact Us</Button>\n              </Link>\n            </Col>\n          </Row> */}\n\n          <CircleLogo />\n          <hr />\n          <h4>Welcome to Remote Medical Treatment</h4>\n          <hr />\n          <RFFormat />\n        </Jumbotron>\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default TeleMed\n","import React, { useState } from 'react'\nimport API from '../../utils/API'\n\nfunction Form () {\n  const [file, setFile] = useState(null)\n\n  const handleFile = e => {\n    e.preventDefault()\n    let fileItem = e.target.files[0]\n    setFile(fileItem)\n    console.log(fileItem)\n  }\n  const handleUpload = e => {\n    e.preventDefault()\n    let data = new FormData()\n    data.append('file', file)\n    data.append('name', 'file')\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    }\n    console.log(data, config)\n    API.upload(data, config)\n  }\n  return (\n    <div>\n      <form onSubmit={handleUpload}>\n        <div className='custom-file mb-3'>\n          <input type='file' name='file' id='file' onChange={handleFile} />\n          <label htmlFor='file' className='custom-file-label'>\n            Choose File\n          </label>\n        </div>\n        <input\n          type='submit'\n          value='Submit'\n          className='btn btn-primary btn-block'\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default Form","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport Form from '../../components/Form'\n\nfunction Demo () {\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col md={6} className='m-auto'>\n            <h1 className='display-4 my-4'>Remote Medical Image Upload</h1>\n\n            <hr />\n            <Form />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Demo","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport StickyNav from \"./components/StickyNav\";\nimport Splash from \"./pages/Splash\";\nimport Demo from \"./pages/Demo\";\nimport TeleMed from \"./pages/TeleMed\";\nimport ImageDemo from \"./pages/ImageUploadDemo\";\n\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <Router>\n          <>\n            <StickyNav />\n          </>\n          <Switch>\n            <Route exact path=\"/\" component={Splash} />\n            <Route exact path=\"/rmt\" component={Demo} />\n            <Route path=\"/rmt/images\" component={ImageDemo} />\n            <Route path=\"/telemed\" component={TeleMed} />\n          </Switch>\n        </Router>\n      </div>  \n    );\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}